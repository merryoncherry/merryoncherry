diff --git a/xLights/models/ArchesModel.cpp b/xLights/models/ArchesModel.cpp
index 0a0fc3b58..9b0e706ec 100644
--- a/xLights/models/ArchesModel.cpp
+++ b/xLights/models/ArchesModel.cpp
@@ -76,6 +76,9 @@ void ArchesModel::AddTypeProperties(wxPropertyGridInterface* grid, OutputManager
         p->SetAttribute("Min", 0);
         p->SetAttribute("Max", 95);
         p->SetEditor("SpinCtrl");
+
+        p = grid->Append(new wxBoolProperty("Zig-Zag Layers", "ZigZag", zigzag));
+        p->SetEditor("CheckBox");
     }
 
     p = grid->Append(new wxUIntProperty("Lights Per Node", "ArchesLights", parm3));
@@ -185,15 +188,24 @@ int ArchesModel::OnPropertyGridChange(wxPropertyGridInterface* grid, wxPropertyG
         AddASAPWork(OutputModelManager::WORK_REDRAW_LAYOUTPREVIEW, "ArchesModel::HandleLayerSizePropertyChange::LayeredArches");
         AddASAPWork(OutputModelManager::WORK_RELOAD_PROPERTYGRID, "ArchesModel::HandleLayerSizePropertyChange::LayeredArches");
         return 0;
+    } else if ("ZigZag" == event.GetPropertyName()) {
+        zigzag = event.GetPropertyValue().GetBool();
+        ModelXml->DeleteAttribute("ZigZag");
+        ModelXml->AddAttribute("ZigZag", event.GetPropertyValue().GetBool() ? "true" : "false");
+        AddASAPWork(OutputModelManager::WORK_RGBEFFECTS_CHANGE, "ArchesModel::OnPropertyGridChange::ArchesZigZag");
+        AddASAPWork(OutputModelManager::WORK_MODELS_CHANGE_REQUIRING_RERENDER, "ArchesModel::OnPropertyGridChange::ArchesZigZag");
+        AddASAPWork(OutputModelManager::WORK_RELOAD_MODEL_FROM_XML, "ArchesModel::OnPropertyGridChange::ArchesZigZag");
+        AddASAPWork(OutputModelManager::WORK_REDRAW_LAYOUTPREVIEW, "ArchesModel::OnPropertyGridChange::ArchesZigZag");
+        return 0;
     } else if ("Hollow" == event.GetPropertyName()) {
         _hollow = event.GetPropertyValue().GetLong();
         ModelXml->DeleteAttribute("Hollow");
         ModelXml->AddAttribute("Hollow", wxString::Format("%d", (int)event.GetPropertyValue().GetLong()));
         IncrementChangeCount();
-        AddASAPWork(OutputModelManager::WORK_RGBEFFECTS_CHANGE, "ArchesModel::OnPropertyGridChange::ArchesGap");
-        AddASAPWork(OutputModelManager::WORK_MODELS_CHANGE_REQUIRING_RERENDER, "ArchesModel::OnPropertyGridChange::ArchesGap");
-        AddASAPWork(OutputModelManager::WORK_RELOAD_MODEL_FROM_XML, "ArchesModel::OnPropertyGridChange::ArchesGap");
-        AddASAPWork(OutputModelManager::WORK_REDRAW_LAYOUTPREVIEW, "ArchesModel::OnPropertyGridChange::ArchesGap");
+        AddASAPWork(OutputModelManager::WORK_RGBEFFECTS_CHANGE, "ArchesModel::OnPropertyGridChange::ArchesHollow");
+        AddASAPWork(OutputModelManager::WORK_MODELS_CHANGE_REQUIRING_RERENDER, "ArchesModel::OnPropertyGridChange::ArchesHollow");
+        AddASAPWork(OutputModelManager::WORK_RELOAD_MODEL_FROM_XML, "ArchesModel::OnPropertyGridChange::ArchesHollow");
+        AddASAPWork(OutputModelManager::WORK_REDRAW_LAYOUTPREVIEW, "ArchesModel::OnPropertyGridChange::ArchesHollow");
         return 0;
     } else if ("ArchesGap" == event.GetPropertyName()) {
         _gap = event.GetPropertyValue().GetLong();
@@ -284,6 +296,7 @@ void ArchesModel::InitModel()
         int NumArches = parm1;
         int SegmentsPerArch = parm2;
         _gap = wxAtoi(ModelXml->GetAttribute("Gap", "0"));
+        zigzag = (ModelXml->GetAttribute("ZigZag", "true") == "true");
 
         SetBufferSize(NumArches, SegmentsPerArch);
         if (SingleNode) {
@@ -378,7 +391,7 @@ void ArchesModel::InitModel()
                     }
                 }
                 y = y + 1;
-                dir = !dir;
+                if (zigzag) dir = !dir;
             }
         }
 
@@ -565,6 +578,7 @@ void ArchesModel::ExportXlightsModel()
     wxString an = ModelXml->GetAttribute("Angle", "0");
     wxString ls = ModelXml->GetAttribute("LayerSizes", "");
     wxString h = ModelXml->GetAttribute("Hollow", "70");
+    wxString zz = ModelXml->GetAttribute("ZigZag", "true");
 
     wxString v = xlights_version_string;
     f.Write("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<archesmodel \n");
@@ -586,6 +600,7 @@ void ArchesModel::ExportXlightsModel()
     f.Write(wxString::Format("SourceVersion=\"%s\" ", v));
     f.Write(wxString::Format("LayerSizes=\"%s\" ", ls));
     f.Write(wxString::Format("Hollow=\"%s\" ", h));
+    f.Write(wxString::Format("ZigZag=\"%s\" ", zz));
     f.Write(ExportSuperStringColors());
     f.Write(" >\n");
 
@@ -630,8 +645,15 @@ void ArchesModel::ImportXlightsModel(wxXmlNode* root, xLightsFrame* xlights, flo
         wxString psp = root->GetAttribute("PixelSpacing");
         wxString ls = root->GetAttribute("LayerSizes");
         wxString h = root->GetAttribute("Hollow");
+        wxString zz = root->GetAttribute("ZigZag");
 
         // Add any model version conversion logic here
+
+        if (zz == "")
+        {
+            zz = "true";
+        }
+
         // Source version will be the program version that created the custom model
 
         SetProperty("parm1", p1);
@@ -653,6 +675,7 @@ void ArchesModel::ImportXlightsModel(wxXmlNode* root, xLightsFrame* xlights, flo
         SetProperty("PixelSpacing", psp);
         SetProperty("LayerSizes", ls);
         SetProperty("Hollow", h);
+        SetProperty("ZigZag", zz);
 
         wxString newname = xlights->AllModels.GenerateModelName(name.ToStdString());
         GetModelScreenLocation().Write(ModelXml);
diff --git a/xLights/models/ArchesModel.h b/xLights/models/ArchesModel.h
index 4d66cf2fd..8609d4a19 100644
--- a/xLights/models/ArchesModel.h
+++ b/xLights/models/ArchesModel.h
@@ -23,6 +23,7 @@ class ArchesModel : public ModelWithScreenLocation<ThreePointScreenLocation>
         virtual void InitRenderBufferNodes(const std::string &type, const std::string &camera, const std::string &transform,
                                            std::vector<NodeBaseClassPtr> &Nodes, int &BufferWi, int &BufferHi, bool deep = false) const override;
         virtual int GetNumPhysicalStrings() const override { return 1; }
+        virtual bool StrandsZigZagOnString() const override { return zigzag; } // MoC - I can't find any callers of this function.
 
         virtual int GetLightsPerNode() const override { return parm3; } // default to one unless a model supports this
         virtual void AddTypeProperties(wxPropertyGridInterface* grid, OutputManager* outputManager) override;
@@ -53,4 +54,5 @@ class ArchesModel : public ModelWithScreenLocation<ThreePointScreenLocation>
         int arc;
         int _gap = 0;
         int _hollow = 70;
+        bool zigzag = true;
 };
