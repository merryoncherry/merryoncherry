diff --git a/xLights/FontManager.h b/xLights/FontManager.h
index 23865cba6..a1cf01b55 100644
--- a/xLights/FontManager.h
+++ b/xLights/FontManager.h
@@ -53,22 +53,6 @@ class FontManager
         static xlFont* get_font(wxString font_name);
         static int get_length(xlFont* font, wxString& text);
 
-        enum XLIGHTS_FONTS {
-            FNT_6_5x6_THIN_SYSTEM,
-            FNT_6_5x6_THIN_VERTICAL_SYSTEM,
-            FNT_6_6x6_THIN_SYSTEM,
-            FNT_6_6x6_THIN_VERTICAL_SYSTEM,
-            FNT_8_8x8_THIN_SYSTEM,
-            FNT_8_8x8_THIN_VERTICAL_SYSTEM,
-            FNT_10_12x12_BOLD_SYSTEM,
-            FNT_10_12x12_BOLD_VERTICAL_SYSTEM,
-            FNT_10_12x12_THIN_SYSTEM,
-            FNT_10_12x12_THIN_VERTICAL_SYSTEM,
-            FNT_12_15x15_BOLD_SYSTEM,
-            FNT_12_15x15_BOLD_VERTICAL_SYSTEM,
-            NUM_XL_FONTS
-        };
-
     protected:
 
     private:
diff --git a/xLights/UtilFunctions.cpp b/xLights/UtilFunctions.cpp
index b538794fc..e6e355e6a 100644
--- a/xLights/UtilFunctions.cpp
+++ b/xLights/UtilFunctions.cpp
@@ -526,7 +526,10 @@ std::string UnXmlSafe(const wxString &res)
         r2.Replace("&amp;", "&");
         return r2.ToStdString();
     }
-    return res.ToStdString();
+    // MoC - ToStdString is not as const as it claims, and mutates a temp
+    //   structure in the string in a non-threadsafe way.  UnXmlSafe is
+    //   sometimes called by multiple threads against the same string, so copy it.
+    return res.Clone().ToStdString();
 }
 
 std::string XmlSafe(const std::string& s)
diff --git a/xLights/effects/ShapeEffect.cpp b/xLights/effects/ShapeEffect.cpp
index 6245958a4..42e1e0aac 100644
--- a/xLights/effects/ShapeEffect.cpp
+++ b/xLights/effects/ShapeEffect.cpp
@@ -10,6 +10,7 @@
 
 #include "ShapeEffect.h"
 #include "ShapePanel.h"
+#include "TextEffect.h" // FontMapLock
 
 #include "../sequencer/Effect.h"
 #include "../RenderBuffer.h"
@@ -452,8 +453,9 @@ void ShapeEffect::Render(Effect *effect, const SettingsMap &SettingsMap, RenderB
         _sinceLastTriggered = 0;
 
         if (Object_To_Draw == RENDER_SHAPE_EMOJI) {
+            FontMapLock locker;
             wxFont ff(font);
-            ff.SetNativeFontInfoUserDesc(font);
+            ff.SetNativeFontInfoUserDesc(font); // This needs FontMapLock above
 
             _font = wxFontInfo(wxSize(0, 12));
             wxString face = ff.GetFaceName();
diff --git a/xLights/effects/TextEffect.cpp b/xLights/effects/TextEffect.cpp
index 4a75bd835..2ad5d51e0 100644
--- a/xLights/effects/TextEffect.cpp
+++ b/xLights/effects/TextEffect.cpp
@@ -383,11 +383,16 @@ void TextEffect::SetPanelStatus(Model* cls)
 //countdown = !to date!%fmt: put delimiter + target date + same delimiter + format string with %x markers in it (described down below)
 
 std::mutex FONT_MAP_LOCK;
+FontMapLock::FontMapLock() :
+    lk(FONT_MAP_LOCK)
+{}
+FontMapLock::~FontMapLock() {}
+
 std::map<std::string, wxFontInfo> FONT_MAP;
 
 void SetFont(TextDrawingContext *dc, const std::string& FontString, const xlColor &color) {
     static log4cpp::Category &logger_base = log4cpp::Category::getInstance(std::string("log_base"));
-    std::unique_lock<std::mutex> locker(FONT_MAP_LOCK);
+    FontMapLock locker;
     if (FONT_MAP.find(FontString) == FONT_MAP.end()) {
         if (!FontString.empty())
         {
@@ -1395,21 +1400,28 @@ void TextEffect::FormatCountdown(int Countdown, int state, wxString& Line, Rende
     }
 }
 
+#define msgReplace(a, b, c) \
+    do                      \
+    {                    \
+       if (a.Contains(b)) { \
+           a.Replace(b, (c)); \
+       } \
+    } while (0)
 
 void TextEffect::ReplaceVaribles(wxString& msg, RenderBuffer& buffer) const
 {
-    msg.Replace("${TITLE}", buffer.GetXmlHeaderInfo(HEADER_INFO_TYPES::SONG));
-    msg.Replace("${SONG}", buffer.GetXmlHeaderInfo(HEADER_INFO_TYPES::SONG));
-    msg.Replace("${ARTIST}", buffer.GetXmlHeaderInfo(HEADER_INFO_TYPES::ARTIST));
-    msg.Replace("${ALBUM}", buffer.GetXmlHeaderInfo(HEADER_INFO_TYPES::ALBUM));
+    msgReplace(msg, "${TITLE}", buffer.GetXmlHeaderInfo(HEADER_INFO_TYPES::SONG));
+    msgReplace(msg, "${SONG}", buffer.GetXmlHeaderInfo(HEADER_INFO_TYPES::SONG));
+    msgReplace(msg, "${ARTIST}", buffer.GetXmlHeaderInfo(HEADER_INFO_TYPES::ARTIST));
+    msgReplace(msg, "${ALBUM}", buffer.GetXmlHeaderInfo(HEADER_INFO_TYPES::ALBUM));
     if (buffer.GetMedia() != nullptr) {
-        msg.Replace("${FILENAME}", buffer.GetMedia()->FileName());
+        msgReplace(msg, "${FILENAME}", buffer.GetMedia()->FileName());
     }
-    msg.Replace("${AUTHOR}", buffer.GetXmlHeaderInfo(HEADER_INFO_TYPES::AUTHOR));
-    msg.Replace("${AUTHOREMAIL}", buffer.GetXmlHeaderInfo(HEADER_INFO_TYPES::AUTHOR_EMAIL));
-    msg.Replace("${COMMENT}", buffer.GetXmlHeaderInfo(HEADER_INFO_TYPES::COMMENT));
-    msg.Replace("${URL}", buffer.GetXmlHeaderInfo(HEADER_INFO_TYPES::URL));
-    msg.Replace("${WEBSITE}", buffer.GetXmlHeaderInfo(HEADER_INFO_TYPES::WEBSITE));
+    msgReplace(msg, "${AUTHOR}", buffer.GetXmlHeaderInfo(HEADER_INFO_TYPES::AUTHOR));
+    msgReplace(msg, "${AUTHOREMAIL}", buffer.GetXmlHeaderInfo(HEADER_INFO_TYPES::AUTHOR_EMAIL));
+    msgReplace(msg, "${COMMENT}", buffer.GetXmlHeaderInfo(HEADER_INFO_TYPES::COMMENT));
+    msgReplace(msg, "${URL}", buffer.GetXmlHeaderInfo(HEADER_INFO_TYPES::URL));
+    msgReplace(msg, "${WEBSITE}", buffer.GetXmlHeaderInfo(HEADER_INFO_TYPES::WEBSITE));
 
     if (msg.Contains("${UPPER}")) {
         msg.Replace("${UPPER}", "");
diff --git a/xLights/effects/TextEffect.h b/xLights/effects/TextEffect.h
index d67ce21a1..8920a17f8 100644
--- a/xLights/effects/TextEffect.h
+++ b/xLights/effects/TextEffect.h
@@ -13,12 +13,27 @@
 #include "RenderableEffect.h"
 
 #include <vector>
+#include <mutex>
 
 class wxString;
 class TextDrawingContext;
 class FontManager;
 class wxImage;
 
+// MoC - March 2023
+// The wx font map is not thread safe in some cases, effects using
+//   it from background threads need to mutex each other (and ideally
+//   the event loop thread but meh.  This is not the best place (WX
+//   would be a better place), but this is better than no place.
+class FontMapLock
+{
+    std::unique_lock<std::mutex> lk;
+
+public:
+    FontMapLock();
+    ~FontMapLock();
+};
+
 class TextEffect : public RenderableEffect
 {
 public:
